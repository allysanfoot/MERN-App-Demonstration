{"version":3,"sources":["components/Navigation.js","components/Exercise.js","components/ExerciseList.js","pages/HomePage.js","pages/AddExercisePage.js","pages/EditExercisePage.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","to","Exercise","exercise","onEdit","onDelete","name","reps","weight","unit","date","substring","onClick","_id","ExerciseList","exercises","id","map","i","HomePage","setExercise","history","useHistory","useState","setExercises","loadExercises","a","fetch","response","json","onEditExercise","push","onDeleteExercise","method","status","getResponse","console","error","useEffect","AddExercisePage","setName","setReps","setWeight","setUnit","setDate","addExercise","newExercise","body","JSON","stringify","headers","alert","onSubmit","e","preventDefault","for","type","placeholder","value","onChange","target","required","min","EditExercisePage","editExercise","errMessage","Error","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8f9265c.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nfunction Navigation() {\n  return (\n    <nav>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"../add-exercise\">Add Exercise</Link>\n    </nav>\n  );\n}\n\nexport default Navigation;\n","import React from 'react';\r\nimport { MdDeleteForever, MdEdit } from 'react-icons/md';\r\n\r\nfunction Exercise({ exercise, onEdit, onDelete }) {\r\n    return (\r\n        <tr>\r\n            <td>{exercise.name}</td>\r\n            <td>{exercise.reps}</td>\r\n            <td>{exercise.weight}</td>\r\n            <td>{exercise.unit}</td>\r\n            <td>{exercise.date.substring(0,10)}</td>\r\n            <td><MdDeleteForever onClick={() => onDelete(exercise._id)} /></td>\r\n            <td><MdEdit onClick={() => onEdit(exercise)} /></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Exercise;","import React from 'react';\r\nimport Exercise from './Exercise';\r\n\r\nfunction ExerciseList({ exercises, onDelete, onEdit }) {\r\n    return (\r\n        <table id=\"exercises\">\r\n            <caption>Add and Edit Exercises</caption>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Reps</th>\r\n                    <th>Weight</th>\r\n                    <th>Unit</th>\r\n                    <th>Date</th>\r\n                    <th>Delete</th>\r\n                    <th>Edit</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {exercises.map((exercise, i) => \r\n                    <Exercise \r\n                        exercise={exercise} \r\n                        key={i}\r\n                        onDelete={onDelete}\r\n                        onEdit={onEdit} \r\n                    />)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default ExerciseList;\r\n","import React from 'react';\r\nimport ExerciseList from '../components/ExerciseList';\r\nimport { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction HomePage({ setExercise }) {\r\n    // Use the history for updating\r\n    const history = useHistory();\r\n\r\n    // Use state to bring in the data\r\n    const [exercises, setExercises] = useState([]);\r\n\r\n    // RETRIEVE the list of exercises\r\n    const loadExercises = async () => {\r\n        const response = await fetch('/exercises');\r\n        const exercises = await response.json();\r\n        setExercises(exercises);\r\n    } \r\n    \r\n\r\n    // UPDATE an exercise\r\n    const onEditExercise = async exercise => {\r\n        setExercise(exercise);\r\n        history.push(\"/edit-exercise\");\r\n    }\r\n\r\n\r\n    // DELETE an exercises  \r\n    const onDeleteExercise = async _id => {\r\n        const response = await fetch(`/exercises/${_id}`, { method: 'DELETE' });\r\n        if (response.status === 204) {\r\n            const getResponse = await fetch('/exercises');\r\n            const exercises = await getResponse.json();\r\n            setExercises(exercises);\r\n        } else {\r\n            console.error(`Failed to delete exercise with _id = ${_id}, status code = ${response.status}`)\r\n        }\r\n    }\r\n\r\n    // LOAD the exercises\r\n    useEffect(() => {\r\n        loadExercises();\r\n    }, []);\r\n\r\n    // DISPLAY the exercises\r\n    return (\r\n        <>\r\n            <article>\r\n                <h2>List of Exercises</h2>\r\n                <p>Log your exercises here.</p>\r\n                <ExerciseList \r\n                    exercises={exercises} \r\n                    onEdit={onEditExercise} \r\n                    onDelete={onDeleteExercise} \r\n                />\r\n            </article>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const AddExercisePage = () => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [reps, setReps] = useState('');\r\n    const [weight, setWeight] = useState('');\r\n    const [unit, setUnit] = useState('');\r\n    const [date, setDate] = useState('');\r\n    \r\n    const history = useHistory();\r\n\r\n    const addExercise = async () => {\r\n        const newExercise = { name, reps, weight, unit, date };\r\n        const response = await fetch('/exercises', {\r\n            method: 'post',\r\n            body: JSON.stringify(newExercise),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        if(response.status === 201){\r\n            alert(\"Successfully added the exercise!\");\r\n        } else {\r\n            alert(`Failed to add exercise, status code = ${response.status}`);\r\n        }\r\n        history.push(\"/\");\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n        <article>\r\n            <h2>Add to the exercise log</h2>\r\n            <p>You can log your exercises here.</p>\r\n            <form onSubmit={(e) => { e.preventDefault();}}>\r\n                <fieldset>\r\n                    <legend>Which exercise would you like to log?</legend>\r\n                    <label for=\"name\">Exercise Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Name of exercise\"\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)} \r\n                        id=\"name\"\r\n                        required=\"required\" />\r\n                    \r\n                    <label for=\"reps\">Number of Reps</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={reps}\r\n                        placeholder=\"Number of reps\"\r\n                        onChange={e => setReps(e.target.value)} \r\n                        id=\"reps\"\r\n                        min=\"0\" \r\n                        required=\"required\" />\r\n\r\n                    <label for=\"weight\">Weight</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"Weight of exercise\"\r\n                        value={weight}\r\n                        onChange={e => setWeight(e.target.value)} \r\n                        id=\"weight\"\r\n                        min=\"0\" \r\n                        required=\"required\" />\r\n\r\n                    <label for=\"unit\">Unit of Weight</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={unit}\r\n                        placeholder=\"Unit of weight\"\r\n                        onChange={e => setUnit(e.target.value)} \r\n                        id=\"unit\" \r\n                        required=\"required\" />\r\n\r\n                    <label for=\"date\">Date of Exercise</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        value={date}\r\n                        onChange={e => setDate(e.target.value)} \r\n                        id=\"date\" \r\n                        required=\"required\" />\r\n\r\n                    <label for=\"submit\">\r\n                    <button\r\n                        type=\"submit\"\r\n                        onClick={addExercise}\r\n                        id=\"submit\"\r\n                    >Add</button> to the workout log</label>\r\n                </fieldset>\r\n                </form>\r\n            </article>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddExercisePage;","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from 'react';\r\n\r\nexport const EditExercisePage = ({ exercise }) => {\r\n \r\n    const [name, setName] = useState(exercise.name);\r\n    const [reps, setReps] = useState(exercise.reps);\r\n    const [weight, setWeight] = useState(exercise.weight);\r\n    const [unit, setUnit] = useState(exercise.unit);\r\n    const [date, setDate] = useState(exercise.date);\r\n    \r\n    const history = useHistory();\r\n\r\n    const editExercise = async () => {\r\n        const response = await fetch(`/exercises/${exercise._id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({ \r\n                name: name,\r\n                reps: reps,\r\n                weight: weight,\r\n                unit: unit,\r\n                date: date\r\n            }),\r\n            headers: {'Content-Type': 'application/json',},\r\n        });\r\n\r\n        if (response.status === 200) {\r\n            alert(\"Successfully edited exercise entry!\");\r\n        } else {\r\n            const errMessage = await response.json();\r\n            alert(`Failed to update entry. Status ${response.status}. ${errMessage.Error}`);\r\n        }\r\n        history.push(\"/\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <article>\r\n            <h2>Edit an entry in the workout log.</h2>\r\n            <p>You can edit an exercise by updating one or more of the following fields.</p>\r\n            <form onSubmit={(e) => { e.preventDefault();}}>\r\n                <fieldset>\r\n                    <legend>Which fields are you updating?</legend>\r\n                    <label for=\"name\">Exercise Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)} \r\n                        id=\"name\" />\r\n                    \r\n                    <label for=\"reps\">Number of Reps</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={reps}\r\n                        onChange={e => setReps(e.target.value)} \r\n                        id=\"number\"\r\n                        min=\"0\"  />\r\n\r\n                    <label for=\"weight\">Weight</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={weight}\r\n                        onChange={e => setWeight(e.target.value)} \r\n                        id=\"weight\"\r\n                        min=\"0\"  />\r\n\r\n                    <label for=\"unit\">Unit of Weight</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={unit}\r\n                        onChange={e => setUnit(e.target.value)} \r\n                        id=\"unit\" />\r\n\r\n                    <label for=\"date\">Date of Exercise</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        value={date}\r\n                        onChange={e => setDate(e.target.value)} \r\n                        id=\"date\" />\r\n\r\n                    <label for=\"submit\">\r\n                    <button\r\n                        onClick={editExercise}\r\n                        id=\"submit\"\r\n                    >Save</button> updates to the collection</label>\r\n                </fieldset>\r\n                </form>\r\n            </article>\r\n        </>\r\n    );\r\n}\r\nexport default EditExercisePage;","// Import dependencies\nimport React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { useState } from 'react';\n\n// Import Components, styles, media\nimport Navigation from './components/Navigation';\nimport './App.css';\n\n// Import Pages\nimport HomePage from './pages/HomePage';\nimport AddExercisePage from './pages/AddExercisePage';\nimport EditExercisePage from './pages/EditExercisePage';\n\n// Define the function that renders the content in routes using State.\nfunction App() {\n\n  const [exercise, setExercise] = useState([]);\n\n  return (\n    <>\n      <Router>\n\n          <header>\n            <h1>Exercise Log</h1>\n            <p>MERN demonstration by Allysa Foot</p>\n          </header>\n\n          <Navigation />\n\n          <main>\n            <Route path=\"/\" exact>\n              <HomePage setExercise={setExercise} />\n            </Route>\n\n            <Route path=\"/add-exercise\">\n              <AddExercisePage />\n            </Route>\n            \n            <Route path=\"/edit-exercise\">\n              <EditExercisePage exercise={exercise} />\n            </Route>\n          </main>\n\n          <footer>\n            <p>&copy; 2022 Allysa Foot</p>\n          </footer>\n\n      </Router>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}